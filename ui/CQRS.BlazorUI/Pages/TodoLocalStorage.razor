@page "/todo/local"
@using Blazored.LocalStorage
@using CQRS.BlazorUI.Components.Todo
@using CQRS.BlazorUI.Models

<PageTitle>To Do - Local Storage</PageTitle>

<h1>To-Dos (Local Storage)</h1>

<TodoForm 
    OnAdd="AddTodo">
</TodoForm>

<TodoTable 
    todoCount="@todoCount" 
    todoItems="@todoItems" 
    OnDone="DoneTodo" 
    OnRemove="RemoveTodo">
</TodoTable>

@code {
    private List<TodoItem> todoItems = new();
    private int nextId = 1;
    private int todoCount = 0;

    private const string StorageKey = "localTodos";

    [Inject]
    private ILocalStorageService? localStorageService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (localStorageService != null)
        {
            var storedItems = await localStorageService.GetItemAsync<List<TodoItem>>(StorageKey);
            
            if (storedItems != null)
            {
                todoItems = storedItems;
                nextId = todoItems.Any() ? todoItems.Max(todo => todo.Id) + 1 : 1;
                CountTheTodo();
            }
        }
    }

    private async Task AddTodo(TodoItem todoItem)
    {
        todoItem.Id = nextId++;
        todoItems.Add(todoItem);
        CountTheTodo();

        if (localStorageService != null)
        {
            await localStorageService.SetItemAsync(StorageKey, todoItems);
        }
    }

    private async Task RemoveTodo(int id)
    {
        var todo = todoItems.FirstOrDefault(a => a.Id == id);

        if (todo != null)
        {
            todoItems.Remove(todo);
            CountTheTodo();
        }

        if (localStorageService != null)
        {
            await localStorageService.SetItemAsync(StorageKey, todoItems);
        }
    }

    private async Task DoneTodo(int id)
    {
        var todo = todoItems.FirstOrDefault(a => a.Id == id);

        if (todo != null)
        {
            todo.IsDone = true;
            CountTheTodo();
        }

        if (localStorageService != null)
        {
            await localStorageService.SetItemAsync(StorageKey, todoItems);
        }
    }

    private void CountTheTodo()
    {
        todoCount = todoItems.Count(toto => !toto.IsDone);
    }
}